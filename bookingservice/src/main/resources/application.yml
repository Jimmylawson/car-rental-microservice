server:
  port: 8081

spring:
  application:
    name: booking-service
  main:
    allow-bean-definition-overriding: true
  datasource:
    url: jdbc:h2:mem:bookingdb
    username: sa
    password: password
    driver-class-name: org.h2.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  h2:
    console:
      enabled: true

eureka:
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  instance:
    preferIpAddress: true
    hostname: localhost
feign:
  client:
    config:
      default:
        connectTimeout: 1000  # 1 second timeout
        readTimeout: 1000     # 1 second timeout
        loggerLevel: full
resilience4j:
  circuit-breaker:
    instances:
      userService:  # This must match the name in @CircuitBreaker annotation
        registerHealthIndicator: true
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowType: COUNT_BASED
        minimumNumberOfCalls: 1  # Reduced for testing
        waitDurationInOpenState: 5s  # Reduced for testing
        failureRateThreshold: 50
        recordExceptions:
          - java.lang.Exception
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - org.springframework.web.client.HttpServerErrorException
          - org.springframework.web.client.ResourceAccessException




info:
  app:
    name: "booking-service"
    description: "Booking microservice for reservations"
    version: "1.0.0"

management:
  endpoint:
    health:
      show-details: always
      prometheus:
        enabled: true
  endpoints:
    web:
      exposure:
        include: health, info, prometheus
  metrics:
    tags:
      application: ${spring.application.name}

